{"version":3,"sources":["logo.png","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","App","billet","setBillet","useState","barcodeMask","setBarcodeMask","className","src","logo","alt","mask","onChange","e","target","value","startsWith","code","isBarcode","length","isBankLine","isTributeLine","Billets","parse","console","log","undefined","parseBillet","replace","RegExp","onClick","BankBillet","createBillet","Math","round","random","TributeBillet","toBarcode","billetNumber","toLine","VMasker","toPattern","toNumber","getBillet","bank","bankList","get","Number","toFixed","currency","date","format","renderBankBillet","identifier","segment","business","open_field","renderTributeBillet","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bab1d4f2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c418149f.png\";","import React, { useState } from 'react';\nimport logo from './logo.png';\nimport './App.css';\nimport InputMask from 'react-input-mask';\nimport Billets, { TributeBillet, BankBillet, list as bankList } from '@ledstartup/boleto';\nimport VMasker from 'vanilla-masker';\n\nconst maskBankBillet = (billetNumber: string) => \n  VMasker.toPattern(VMasker.toNumber(billetNumber), \"SSSSS.SSSSS SSSSS.SSSSSS SSSSS.SSSSSS S SSSSSSSSSSSSSS\");\nconst maskTributeBillet = (billetNumber: string) => \n  VMasker.toPattern(VMasker.toNumber(billetNumber), \"SSSSSSSSSSS S SSSSSSSSSSS S SSSSSSSSSSS S SSSSSSSSSSS S\");\n\nfunction App() {\n  const defaultMask=\"\";\n  const bankBilletMask=\"99999.99999 99999.999999 99999.999999 9 99999999999999\";\n  const tributeBilletMask=\"99999999999 9 99999999999 9 99999999999 9 99999999999 9\";\n  let [ barcodeMask, setBarcodeMask ] = useState(defaultMask);\n  let billet: BankBillet | TributeBillet | undefined\n  let setBillet: any\n  [ billet, setBillet ] = useState()\n\n  function parseBillet(code: string) {\n    const isBarcode = code.length === 44\n    const isBankLine = code[0] !== '8' && code.length === 47\n    const isTributeLine = code[0] === '9' && code.length === 48\n    if (isBarcode || isBankLine || isTributeLine) {\n      try {\n        setBillet(Billets.parse(code))\n      } catch (e){\n        console.log(e)\n      }\n    } else {\n      setBillet(undefined)\n    }\n  }\n\n  function renderBankBillet(billet: BankBillet) {\n    return <form>\n      <div><label>Tipo: {billet instanceof BankBillet ? \"Bancário\" : \"Tributo\"}</label></div>\n      <div><label>Código de barras: {billet?.toBarcode()}</label></div>\n      <div><label>Linha digitável: {maskBankBillet(billet?.toLine())}</label></div>\n      <div><label>Banco: {billet?.getBillet().bank} - {bankList.get(billet?.getBillet().bank) || \"Desconhecido\"}</label></div>\n      <div><label>Valor: R$ {(Number(billet?.getBillet().value || 0)/100).toFixed(2)}</label></div>\n      <div><label>Moeda: {billet?.getBillet().currency}</label></div>\n      <div><label>Validade: {billet?.getBillet().date.format(\"DD/MM/YYYY\")}</label></div>\n    </form>\n  }\n\n  function renderTributeBillet(billet: TributeBillet) {\n    return <form >\n      <div><label>Tipo: {billet instanceof BankBillet ? \"Bancário\" : \"Tributo\"}</label></div>\n      <div><label>Código de barras: {billet?.toBarcode()}</label></div>\n      <div><label>Linha digitável: {maskTributeBillet(billet?.toLine())}</label></div>\n      <div><label>Valor: R$ {(Number(billet?.getBillet().value || 0)/100).toFixed(2)}</label></div>\n      <div><label>------------------------</label></div>\n      <div><label>Identificador: {billet?.getBillet().identifier}</label></div>\n      <div><label>Segmento: {billet?.getBillet().segment}</label></div>open_field\n      <div><label>Empresa: {billet?.getBillet().business}</label></div>\n      <div><label>Campos abertos: {billet?.getBillet().open_field}</label></div>\n    </form>\n  }\n\n  function randomizeBankBillet() {\n    setBillet(BankBillet.createBillet(Math.round(Math.random()*5000), 30))\n  }\n\n  function randomizeTributeBillet() {\n    setBillet(TributeBillet.createBillet(Math.round(Math.random()*5000)))\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <label>Boletos</label>\n      </header>\n      <div className=\"App-body\">\n        <div>\n          <label>\n            Código de barras ou linha digitável:\n          </label>\n          <InputMask\n            className=\"Barcode-input\"\n            mask={barcodeMask}\n            onChange={e => {\n              e.target.value.startsWith(\"8\") ? \n                setBarcodeMask(tributeBilletMask) :\n                setBarcodeMask(bankBilletMask);\n              const unmasked = e.target.value.replace(new RegExp(/[^0-9]+/, 'g'), '')\n              parseBillet(unmasked)\n            }}\n            />\n        </div>\n        <div>\n          <button className=\"Barcode-random\" onClick={randomizeBankBillet} >Gerar Bancário</button>\n          <button className=\"Barcode-random\" onClick={randomizeTributeBillet}>Gerar Tributo</button>\n        </div>\n        { billet && <div className=\"Barcode-output\">\n            {(billet instanceof BankBillet) && renderBankBillet(billet)}\n            {(billet instanceof TributeBillet) && renderTributeBillet(billet)}\n        </div> }\n      </div>\n      <div className=\"App-footer\">\n        <label>© 2020 LED Startup Studio</label>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}